			    Problem Set 5

		 Harvard Extension School CSCI E-93:
			Computer Architecture

			      Fall 2017

		  Due: November 12, 2017 at Midnight

Total of 150 Points

Please submit your solution to this problem set using "git" with the tag
ps5-submit.

For this assignment, based on your architecture design from Problem
Set 2 with appropriate modifications made by you based on comments and
design changes, implement the following program.

You will need the programs you created for Problem Set 4 as input to
this assignment.  If you have not completed Problem Set 4 yet, it must
be completed for you to test and complete this assignment.  Please
talk with the professor or with one of the teaching fellows if this is
a problem.


Write a software simulator (emulator) for your instruction set
architecture design.  The emulator should simulate the entire
instruction set including Input/Output to the serial (RS-232) ports.
For a description of the Input/Output system, refer to
http://sites.fas.harvard.edu/~cscie287/fall2017/io_interface.txt.

The emulator should contain an array which will contain the simulated
memory.  That array must be at least 64K bytes in size and at most 2M
bytes in size (all of the memory is byte-addressable by 21 bits).  If
your architecture requires only 16-bit or 32-bit word access to
memory, the memory may be organized as 16-bit or 32-bit words.  If
your architecture allows more than one of byte, 16-bit word, and
32-bit word accesses to memory, keep in mind that the memory system we
are providing is organized as little endian.

Initially, the emulator should either read the name of a file
containing an image of memory in the .mif format described in class
from the command line or should prompt for such a file name.  Next,
the emulator should initialize its simulated memory with the contents
of the input .mif file.  Remember that the memory system we are
providing allows only the low 32K bytes of memory to be initialized
for a DE2-70 and only the low 64K bytes of memory to be initialized
for a DE2-115.  The emulator should initialize all registers to their
power-up state -- probably this is just that the PC (Program Counter)
is set to zero.

Next, the main loop should commence.  The emulator must simulate all
actions taken by your architecture and the state of all your
registers.  For example, the main loop might set the IR (Instruction
Register) to contain the contents of the simulated memory at the
location given by the PC.  Then, the PC would be incremented.  Next,
depending on the contents of the IR (i.e., depending on what is the
current instruction), various other operations would occur --
performing arithmetic or logical operations, altering other registers,
reading or writing the simulated memory, etc.

The emulator must also simulate the I/O (Input/Output) interface to
the serial (RS-232) ports.  The PS/2 and LCD ports and their
control/status bits need not be implemented.  It is acceptable to
assume that serial (RS-232) input and output are always ready.  If you
implement this approach, any attempt to read a character will stall
until a character is typed (if the input is buffered as a line, the
input operation will stall until a complete line is typed).  Extra
credit will be awarded for simulating the input ready bit.

Because I/O is memory-mapped (i.e., is accessed via memory locations),
it is probably advantageous to write accessor functions to allow
reading and writing of memory.  That way, any access to an I/O device
register location in memory can perform the correct I/O operation
rather than simply accessing the simulated memory location.

Your emulator must have the option of tracing your program's
execution.  In the simplest approach, this would be displaying the PC
of each emulated instruction before executing it.  More elaborate
approaches might include displaying all registers before executing
each instruction, displaying only those registers that were modified
before executing each instruction, displaying all registers in a
separate continually-updated window, perhaps including the use of
color to indicate which registers were modified, etc.  These
approaches will be awarded extra credit.

Extra credit: Optionally, before execution of each instruction,
display the instruction about to be executed in the same format that
the assembly language defines -- this is action is called
"disassembling."

You must verify that your emulator works correctly by running the
final program (problem 9) from Problem Set 4.  That is, write a
program in your assembly language to prompt for two signed decimal
integers (each of at least 2-bytes (16-bits) in size) and to multiply
one by the other and then to output the resulting integer product in
decimal as described in Problem Set 4.

Please include with this assignment an up-to-date copy of your
processor's block diagram and an up-to-date copy of your processor's
instruction set.


			Last revised 27-Jul-17
