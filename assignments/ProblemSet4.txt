			    Problem Set 4

		 Harvard Extension School CSCI E-93:
			Computer Architecture

			     Spring 2016

		   Due: March 27, 2016 at Midnight

Total of 270 Points

Please submit your solution to this problem set using "git" with the tag
ps4-submit.

For this assignment, based on your architecture design from Problem
Set 2 with appropriate modifications made by you based on comments and
design changes, implement all of the following programs.

1. (100 Points) Write an assembler for your assembly language that
   will translate programs (all of the instructions and any data) in
   symbolic form into hexadecimal bytes by location in memory to be
   emitted as a file in the Altera Memory Initialization File (.mif)
   format (see the link at:
   http://quartushelp.altera.com/13.0/mergedProjects/reference/glossary/def_mif.htm).
   Note that for the DE2-70, the value for the DEPTH parameter must be
   16384, the WIDTH parameter must be 16.  For the DE2-115, the value
   for the DEPTH parameter must be 32768, the WIDTH parameter must
   still be 16.  These constraints are necessary because the memory
   system we are providing allows only the low 32K bytes of memory to
   be initialized in the DE2-70 and the low 64K bytes of memory in the
   DE2-115.

   Your assembler should allow forward references to be used in the
   symbolic program.  You may choose the appropriate number of passes
   to be made over the symbolic assembler program in order to produce
   your hexadecimal output file.  One pass may require fixups, two
   passes are sufficient, three or more passes may allow optimization
   to be performed if short and long branches are allowed in your
   instruction set.

   You may write the assembler in C, C++, or Java.  If you'd like to use
   a different implementation language, please check with the instructor.


For each of the following programs, after each program is written, use
your assembler to translate the program (all of the instructions and
any data) into hexadecimal bytes by location in memory.  You should
assume that the computer starts execution at location zero in memory.
All solutions should be implemented as subroutines (functions,
procedures) if your architecture supports them.  You should deal with
the I/O devices using the memory-mapped interface defined in the I/O
specification document:
http://sites.fas.harvard.edu/~cscie287/fall2014/io_interface.txt.

If your architecture allows both byte and 16-bit word accesses to
memory, keep in mind that the memory system we are providing is
organized as little endian.

2. (10 Points) Write a program in your assembly language to output a
   single character on the output device.  The character may be stored
   in a register or in memory as appropriate for your architecture.

3. (10 Points) Write a program in your assembly language to input a
   single character from the input device.  The character will be
   returned in a register or in memory as appropriate for your
   architecture.

4. (15 Points) Write a program in your assembly language to output a
   sequence of characters (i.e., a string) stored in memory on the
   output device.

5. (15 Points) Write a program in your assembly language to read an
   enter-terminated (i.e., line-feed) sequence of characters from the
   input device.  The string should be stored in memory after being
   read.

6. (25 Points) Write a program in your assembly language to output a
   signed decimal integer on the output device.  Prior to outputting
   the value of the number, it will be stored as a signed 2-byte
   (16-bit) integer in two's-complement representation.  The integer
   may be stored in a register or in memory as appropriate for your
   architecture.

7. (25 Points) Write a program in your assembly language to input a
   signed decimal integer from the input device.  The value of the
   number should be converted into a signed 2-byte (16-bit) integer in
   two's complement representation.  The integer will be returned in a
   register or in memory as appropriate for your architecture.

8. (50 Points) Write a program in your assembly language to multiply
   two signed integers (the multiplicand multiplied by the multiplier)
   and return the resulting signed integer product.  The minimum
   requirement is for the multiplicand, the multiplier, and the
   product to all be 16-bit signed integer words.  However, you are
   welcome to implement extended precision (for example, to multiply
   two 16-bit words to produce a 32-bit doubleword product or to
   multiply two 32-bit doublewords to produce either a 32-bit
   doubleword or a 64-bit quadword product), but that is not required.

9. (20 Points) Write a program in your assembly language to prompt
   (i.e. output a string to request input) a user to enter two signed
   decimal 2-byte (16-bit) integers and to multiply one by the other
   and then to output the resulting 2-byte integer product in decimal.


			Last revised 25-Jan-16
